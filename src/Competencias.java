
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

public class Competencias extends javax.swing.JFrame {

    private boolean atualizacao = false;

    public Competencias() {
        this.setVisible(true);

        new Thread(() -> {
            String inputLine = null;
            while (this.isVisible()) {
                try {
                    inputLine = SocketModel.getInstance().getIn().readLine();
                } catch (SocketTimeoutException ex) {
                    if (this.isVisible()) {
                        continue;
                    } else {
                        break;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Competencias.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Cliente recebeu: " + inputLine);
                JSONObject mensagem = new JSONObject(inputLine);

                SwingUtilities.invokeLater(() -> {
                    switch (mensagem.getString("operacao")) {
                        case "visualizarCompetenciaExperiencia":
                            switch (mensagem.getInt("status")) {
                                case 201:
                                    DefaultTableModel model = (DefaultTableModel) tblCompetencias.getModel();
                                    for (Object competenciaExperiencia : mensagem.getJSONArray("competenciaExperiencia")) {
                                        int experiencia =((JSONObject) competenciaExperiencia).getInt("experiencia");
                                        model.addRow(new String[]{
                                            ((JSONObject) competenciaExperiencia).getString("competencia"),
                                            (String.valueOf(experiencia))}
                                        );
                                    }
                                    break;

                                default:
                                    JOptionPane.showMessageDialog(null, mensagem.getString("mensagem"), "Erro", JOptionPane.ERROR_MESSAGE);
                                    break;

                            }
                            break;

                        case "cadastrarCompetenciaExperiencia":
                        case "atualizarCompetenciaExperiencia":
                        case "apagarCompetenciaExperiencia":
                            switch (mensagem.getInt("status")) {
                                case 201:
                                    JOptionPane.showMessageDialog(null, mensagem.getString("mensagem"), "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    dialogo.setVisible(false);
                                    this.listarCompetenciaExperiencia();
                                    break;

                                default:
                                    JOptionPane.showMessageDialog(null, mensagem.getString("mensagem"), "Erro", JOptionPane.ERROR_MESSAGE);
                                    break;

                            }
                            break;

                        default:
                            System.err.println("Cliente recebeu operação não registrada: " + mensagem.getString("operacao"));
                            break;
                    }
                });
            }
        }).start();

        initComponents();
        dialogo.pack();
        dialogo.setLocationRelativeTo(null);

        this.listarCompetenciaExperiencia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogo = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        cmbCompetenciaDialog = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtExperienciaDialog = new javax.swing.JFormattedTextField();
        btnVoltarDialog = new javax.swing.JButton();
        lblTituloDialog = new javax.swing.JLabel();
        btnSalvarDialog = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCompetencias = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAdicionar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        dialogo.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogo.setTitle("ADICIONAR COMPETÊNCIA");
        dialogo.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        cmbCompetenciaDialog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cmbCompetenciaDialog.setSelectedItem(null);

        jLabel4.setText("Experiência");

        txtExperienciaDialog.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        btnVoltarDialog.setText("Voltar");
        btnVoltarDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarDialogActionPerformed(evt);
            }
        });

        lblTituloDialog.setText("Adicionar competência");

        btnSalvarDialog.setText("Adicionar");
        btnSalvarDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarDialogActionPerformed(evt);
            }
        });

        jLabel3.setText("Competência");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnVoltarDialog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvarDialog))
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(lblTituloDialog)
                    .addComponent(cmbCompetenciaDialog, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtExperienciaDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblTituloDialog)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCompetenciaDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtExperienciaDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltarDialog)
                    .addComponent(btnSalvarDialog))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogoLayout = new javax.swing.GroupLayout(dialogo.getContentPane());
        dialogo.getContentPane().setLayout(dialogoLayout);
        dialogoLayout.setHorizontalGroup(
            dialogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
        dialogoLayout.setVerticalGroup(
            dialogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMPETÊNCIAS");

        tblCompetencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Competência", "Experiência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCompetencias.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblCompetencias);
        if (tblCompetencias.getColumnModel().getColumnCount() > 0) {
            tblCompetencias.getColumnModel().getColumn(0).setResizable(false);
            tblCompetencias.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Competências");

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdicionar))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdicionar)
                        .addComponent(btnAtualizar)
                        .addComponent(btnExcluir))
                    .addComponent(btnVoltar))
                .addGap(36, 36, 36))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        new Inicio();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        this.atualizacao = false;
        this.cmbCompetenciaDialog.setSelectedItem(null);
        this.txtExperienciaDialog.setText(null);
        this.cmbCompetenciaDialog.setEnabled(true);
        this.lblTituloDialog.setText("Adicionar competência");
        this.btnSalvarDialog.setText("Cadastrar");
        this.dialogo.setVisible(true);
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        if (this.tblCompetencias.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        this.atualizacao = true;
        this.cmbCompetenciaDialog.setSelectedItem(this.tblCompetencias.getValueAt(this.tblCompetencias.getSelectedRow(), 0).toString());
        this.txtExperienciaDialog.setText(this.tblCompetencias.getValueAt(this.tblCompetencias.getSelectedRow(), 1).toString());
        this.cmbCompetenciaDialog.setEnabled(false);
        this.lblTituloDialog.setText("Atualizar competência");
        this.btnSalvarDialog.setText("Atualizar");
        this.dialogo.setVisible(true);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (this.tblCompetencias.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int resposta = JOptionPane.showConfirmDialog(null, "Deseja apagar esta competência?", "Excluir", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (resposta == JOptionPane.YES_OPTION) {
            JSONObject requisicao = new JSONObject();
            requisicao.put("operacao", "apagarCompetenciaExperiencia");
            requisicao.put("email", AuthenticationModel.getInstance().getEmail());
            requisicao.put("token", AuthenticationModel.getInstance().getToken());
            JSONArray competenciasExperiencias = new JSONArray();
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", this.tblCompetencias.getValueAt(this.tblCompetencias.getSelectedRow(), 0).toString());
            competenciaExperiencia.put("experiencia", this.tblCompetencias.getValueAt(this.tblCompetencias.getSelectedRow(), 1).toString());
            competenciasExperiencias.put(competenciaExperiencia);
            requisicao.put("competenciaExperiencia", competenciasExperiencias);
            System.out.println("Cliente enviou: " + requisicao);
            SocketModel.getInstance().getOut().println(requisicao);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnSalvarDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarDialogActionPerformed
        if (cmbCompetenciaDialog.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione uma competência", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (txtExperienciaDialog.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Preencha o tempo de experiência!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            JSONObject requisicao = new JSONObject();
            requisicao.put("operacao", this.atualizacao ? "atualizarCompetenciaExperiencia" : "cadastrarCompetenciaExperiencia");
            requisicao.put("email", AuthenticationModel.getInstance().getEmail());
            requisicao.put("token", AuthenticationModel.getInstance().getToken());
            JSONArray competenciasExperiencias = new JSONArray();
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cmbCompetenciaDialog.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", Integer.parseInt(txtExperienciaDialog.getText()));
            competenciasExperiencias.put(competenciaExperiencia);
            requisicao.put("competenciaExperiencia", competenciasExperiencias);
            System.out.println("Cliente enviou: " + requisicao);
            SocketModel.getInstance().getOut().println(requisicao);
            dialogo.setVisible(false);
        }
    }//GEN-LAST:event_btnSalvarDialogActionPerformed

    private void btnVoltarDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarDialogActionPerformed
        this.dialogo.setVisible(false);
    }//GEN-LAST:event_btnVoltarDialogActionPerformed

    private void listarCompetenciaExperiencia() {
        DefaultTableModel model = (DefaultTableModel) tblCompetencias.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        JSONObject requisicao = new JSONObject();
        requisicao.put("operacao", "visualizarCompetenciaExperiencia");
        requisicao.put("email", AuthenticationModel.getInstance().getEmail());
        requisicao.put("token", AuthenticationModel.getInstance().getToken());
        System.out.println("Cliente enviou: " + requisicao);
        SocketModel.getInstance().getOut().println(requisicao);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvarDialog;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JButton btnVoltarDialog;
    private javax.swing.JComboBox<String> cmbCompetenciaDialog;
    private javax.swing.JDialog dialogo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTituloDialog;
    private javax.swing.JTable tblCompetencias;
    private javax.swing.JFormattedTextField txtExperienciaDialog;
    // End of variables declaration//GEN-END:variables
}
