
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

public class BuscarCandidatos extends javax.swing.JFrame {

    private JSONArray candidatos = null;

    public BuscarCandidatos() {
        this.setVisible(true);

        new Thread(() -> {
            String inputLine = null;
            while (this.isVisible()) {
                try {
                    inputLine = SocketModel.getInstance().getIn().readLine();
                } catch (SocketTimeoutException ex) {
                    if (this.isVisible()) {
                        continue;
                    } else {
                        break;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(BuscarCandidatos.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Cliente recebeu: " + inputLine);
                JSONObject mensagem = new JSONObject(inputLine);

                SwingUtilities.invokeLater(() -> {
                    switch (mensagem.getString("operacao")) {
                        case "filtrarCandidatos":
                            switch (mensagem.getInt("status")) {
                                case 201:
                                    this.candidatos = mensagem.getJSONArray("candidatos");

                                    DefaultTableModel model = (DefaultTableModel) tblCandidatos.getModel();
                                    model.setRowCount(0);
                                    model.fireTableDataChanged();
                                    for (Object candidato : this.candidatos) {
                                        model.addRow(new String[]{
                                            String.valueOf(((JSONObject) candidato).getInt("idCandidato")),
                                            ((JSONObject) candidato).getString("nome"),
                                            ((JSONObject) candidato).getString("email")}
                                        );
                                    }
                                    break;

                                default:
                                    JOptionPane.showMessageDialog(null, mensagem.getString("mensagem"), "Erro", JOptionPane.ERROR_MESSAGE);
                                    break;

                            }
                            break;

                        case "enviarMensagem":
                            switch (mensagem.getInt("status")) {
                                case 201:
                                    JOptionPane.showMessageDialog(null, "Mensagem enviada!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    break;

                                default:
                                    JOptionPane.showMessageDialog(null, mensagem.getString("mensagem"), "Erro", JOptionPane.ERROR_MESSAGE);
                                    break;

                            }
                            break;

                        default:
                            System.err.println("Cliente recebeu operação não registrada: " + mensagem.getString("operacao"));
                            break;
                    }
                });
            }
        }).start();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCandidatos = new javax.swing.JTable();
        btnVoltar = new javax.swing.JButton();
        btnVisualizar = new javax.swing.JButton();
        btnMensagem = new javax.swing.JButton();
        cbCompetencia1 = new javax.swing.JComboBox<>();
        txtExperiencia1 = new javax.swing.JSpinner();
        txtExperiencia4 = new javax.swing.JSpinner();
        cbCompetencia4 = new javax.swing.JComboBox<>();
        txtExperiencia2 = new javax.swing.JSpinner();
        cbCompetencia2 = new javax.swing.JComboBox<>();
        txtExperiencia5 = new javax.swing.JSpinner();
        cbCompetencia5 = new javax.swing.JComboBox<>();
        cbCompetencia3 = new javax.swing.JComboBox<>();
        txtExperiencia3 = new javax.swing.JSpinner();
        cbCompetencia6 = new javax.swing.JComboBox<>();
        txtExperiencia6 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setText("Candidatos");

        jLabel8.setText("Competencia/Experiência");

        jLabel1.setText("Tipo");

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "OR", "AND" }));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tblCandidatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCandidatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane3.setViewportView(tblCandidatos);
        if (tblCandidatos.getColumnModel().getColumnCount() > 0) {
            tblCandidatos.getColumnModel().getColumn(0).setMaxWidth(36);
        }

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnVisualizar.setText("Visualizar");
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        btnMensagem.setText("Enviar mensagem");
        btnMensagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMensagemActionPerformed(evt);
            }
        });

        cbCompetencia1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia1.setSelectedItem(null);

        txtExperiencia1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        txtExperiencia4.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbCompetencia4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia4.setSelectedItem(null);

        txtExperiencia2.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbCompetencia2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia2.setSelectedItem(null);

        txtExperiencia5.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbCompetencia5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia5.setSelectedItem(null);

        cbCompetencia3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia3.setSelectedItem(null);

        txtExperiencia3.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        cbCompetencia6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Python", "C#", "C++", "JS", "PHP", "Swift", "Java", "Go", "SQL", "Ruby", "HTML", "CSS", "NOSQL", "Flutter", "TypeScript", "Perl", "Cobol", "dotNet", "Kotlin", "Dart" }));
        cbCompetencia6.setSelectedItem(null);

        txtExperiencia6.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMensagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbCompetencia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCompetencia4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbCompetencia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCompetencia5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cbCompetencia3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCompetencia6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExperiencia6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbTipo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel7)
                .addGap(14, 14, 14)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbCompetencia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExperiencia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbCompetencia4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExperiencia4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbCompetencia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExperiencia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbCompetencia5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExperiencia5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVisualizar)
                            .addComponent(btnVoltar)
                            .addComponent(btnMensagem)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbCompetencia3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExperiencia3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbCompetencia6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtExperiencia6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar))))
                .addGap(28, 30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String tipo = cmbTipo.getSelectedItem().toString();
        if (tipo.equals("ALL")) {
            cbCompetencia1.setSelectedItem(null);
            txtExperiencia1.setValue(0);
            cbCompetencia2.setSelectedItem(null);
            txtExperiencia2.setValue(0);
            cbCompetencia3.setSelectedItem(null);
            txtExperiencia3.setValue(0);
            cbCompetencia4.setSelectedItem(null);
            txtExperiencia4.setValue(0);
            cbCompetencia5.setSelectedItem(null);
            txtExperiencia5.setValue(0);
            cbCompetencia6.setSelectedItem(null);
            txtExperiencia6.setValue(0);
        } else if (cbCompetencia1.getSelectedItem() == null && cbCompetencia2.getSelectedItem() == null && cbCompetencia3.getSelectedItem() == null && cbCompetencia4.getSelectedItem() == null && cbCompetencia5.getSelectedItem() == null && cbCompetencia6.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione ao menos uma competencia", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JSONObject requisicao = new JSONObject();
        requisicao.put("operacao", "filtrarCandidatos");
        requisicao.put("token", AuthenticationModel.getInstance().getToken());
        JSONObject filtros = new JSONObject();
        JSONArray competenciasExperiencias = new JSONArray();

        if (cbCompetencia1.getSelectedItem() != null && txtExperiencia1.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia1.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia1.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }
        if (cbCompetencia2.getSelectedItem() != null && txtExperiencia2.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia2.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia2.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }
        if (cbCompetencia3.getSelectedItem() != null && txtExperiencia3.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia3.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia3.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }
        if (cbCompetencia4.getSelectedItem() != null && txtExperiencia4.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia4.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia4.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }
        if (cbCompetencia5.getSelectedItem() != null && txtExperiencia5.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia5.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia5.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }
        if (cbCompetencia6.getSelectedItem() != null && txtExperiencia6.getValue() != null) {
            JSONObject competenciaExperiencia = new JSONObject();
            competenciaExperiencia.put("competencia", cbCompetencia6.getSelectedItem().toString());
            competenciaExperiencia.put("experiencia", (Integer) txtExperiencia6.getValue());
            competenciasExperiencias.put(competenciaExperiencia);
        }

        filtros.put("tipo", tipo);
        filtros.put("competenciasExperiencias", competenciasExperiencias);
        requisicao.put("filtros", filtros);
        System.out.println("Cliente enviou: " + requisicao);
        SocketModel.getInstance().getOut().println(requisicao);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        new Inicio();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
        if (this.tblCandidatos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idCandidato = Integer.parseInt(this.tblCandidatos.getValueAt(this.tblCandidatos.getSelectedRow(), 0).toString());
        for (int i = 0; i < candidatos.length(); i++) {
            JSONObject candidato = candidatos.getJSONObject(i);
            if (candidato.getInt("idCandidato") == idCandidato) {
                JSONArray competenciasExperiencias = candidato.getJSONArray("competenciaExperiencia");
                JOptionPane.showMessageDialog(null,
                        "Nome: " + candidato.getString("nome") + "\n"
                        + "Email: " + candidato.getString("email") + "\n"
                        + competenciasExperiencias.toList().stream().map((competenciaExperiencia) -> "Competência: " + ((HashMap) competenciaExperiencia).get("competencia") + ", Experiência: " + ((HashMap) competenciaExperiencia).get("experiencia")).collect(Collectors.joining("\n"))
                );
                break;
            }
        }
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void btnMensagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMensagemActionPerformed
        if (this.tblCandidatos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma ou mais linha na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JSONObject requisicao = new JSONObject();
        requisicao.put("operacao", "enviarMensagem");
        requisicao.put("token", AuthenticationModel.getInstance().getToken());
        requisicao.put("email", AuthenticationModel.getInstance().getEmail());
        JSONArray idsCandidatos = new JSONArray();

        for (int selectedRow : this.tblCandidatos.getSelectedRows()) {
            int idCandidato = Integer.parseInt(this.tblCandidatos.getValueAt(selectedRow, 0).toString());
            idsCandidatos.put(idCandidato);
        }

        requisicao.put("candidatos", idsCandidatos);
        System.out.println("Cliente enviou: " + requisicao);
        SocketModel.getInstance().getOut().println(requisicao);
    }//GEN-LAST:event_btnMensagemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnMensagem;
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cbCompetencia1;
    private javax.swing.JComboBox<String> cbCompetencia2;
    private javax.swing.JComboBox<String> cbCompetencia3;
    private javax.swing.JComboBox<String> cbCompetencia4;
    private javax.swing.JComboBox<String> cbCompetencia5;
    private javax.swing.JComboBox<String> cbCompetencia6;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblCandidatos;
    private javax.swing.JSpinner txtExperiencia1;
    private javax.swing.JSpinner txtExperiencia2;
    private javax.swing.JSpinner txtExperiencia3;
    private javax.swing.JSpinner txtExperiencia4;
    private javax.swing.JSpinner txtExperiencia5;
    private javax.swing.JSpinner txtExperiencia6;
    // End of variables declaration//GEN-END:variables
}
